apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: "org.jetbrains.kotlin.android.extensions"


android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        androidExtensions {
            experimental = true
        }

        externalNativeBuild {
            cmake {
                targets 'tangram'
                arguments '-DPLATFORM_TARGET=android',
                        '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_STL=c++_shared'
                cppFlags '-std=c++14',
                        '-pedantic',
                        '-fPIC',
                        '-fexceptions',
                        '-frtti',
                        //warnings
                        '-Wall',
                        '-Wignored-qualifiers',
                        '-Wtype-limits',
                        '-Wmissing-field-initializers',
                        '-Wno-format-pedantic'

                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
            }
        }
    }

    externalNativeBuild {
        cmake {
            path '../mapfit-gl/CMakeLists.txt'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    buildTypes {

        debug {
            buildConfigField "Boolean", "DEBUG_MODE", "true"
            externalNativeBuild {
                cmake.cppFlags '-g'
            }
        }

        release {
            buildConfigField "Boolean", "DEBUG_MODE", "false"
            externalNativeBuild {
                cmake.cppFlags '-g0'
            }
        }
    }

    defaultConfig {
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }

    kapt { generateStubs = true }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.2'
    compile "org.jetbrains.anko:anko-coroutines:0.10.4"

    compile 'com.android.support:appcompat-v7:27.0.2'
    compile 'com.android.support:support-annotations:27.0.2'

    compile 'com.squareup.okhttp3:okhttp:3.9.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    compile 'com.squareup.moshi:moshi-kotlin:1.5.0'

    testImplementation 'junit:junit:4.12'
    testCompile "org.json:json:20140107"
    testCompile "org.mockito:mockito-core:2.13.0"
    testCompile group: 'org.mockito', name: 'mockito-inline', version: '2.13.0'
    androidTestImplementation "org.mockito:mockito-android:2.13.0"
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

repositories {
    mavenCentral()
}

kotlin {
    experimental {
        coroutines "enable"
    }
}



apply plugin: 'maven-publish'
group = 'com.mapfit'
archivesBaseName = 'mapfit-sdk'
version = '1.0.1'

publishing {

    repositories {
        maven {
            url myMavenRepoWriteUrl
            credentials {
                username 'myMavenRepo'
                password myMavenRepoReadPassword
            }
        }
    }

    publications {
        aar(MavenPublication) {
//            def manifest = new XmlSlurper().parse(project.android.sourceSets.main.manifest.srcFile);

            // Artifact properties
            groupId group
            version  version
            artifactId archivesBaseName

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${archivesBaseName}-debug.aar")

            pom.withXml {
                //Creating additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ["debugCompile", 'compile']

                configurationNames.each { configurationName ->
                    configurations[configurationName].allDependencies.each {
                        if (it.group != null && it.name != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)

                            //If there are any exclusions in dependency
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
